---
title: "Biomass"
author: "Javier Porras"
date: today
execute:
  warning: false # Oculta advertencias
  message: false # Oculta mensajes de la consola
  error: false  
  fig-width: 8
  fig-height: 8
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    number-sections: true
    embed-resources: true
editor: visual
bibliography: "C:/Users/javier.porras/Documents/dynamics_arkaute/code/experiment_references.bib"
---

# Biomass estimation

```{r Opening data}

#| echo: false
#| warning: false

pacman::p_load(dplyr, reshape2, tidyverse, lubridate, ggplot2, ggpubr, rpivotTable, ggrepel, here)

theme_set(theme_bw() +
            theme(
                  legend.position = "right",
                  panel.grid = element_blank(),
                  strip.background = element_blank(),
                  strip.text = element_text(face = "bold"),
                  text = element_text(size = 11)))

flora_raw <- read.csv(here("data","flora_db_raw.csv"))

flora_raw <- flora_raw %>%
  mutate(across(where(is.character), as.factor),
         plot = factor(plot),
         sampling = factor(sampling, levels = sort(unique(flora_raw$sampling))),
         treatment =  factor(flora_raw$treatment, levels =  c("c", "w", "p", "wp")),
         plot = factor(plot, levels = sort(unique(flora_raw$plot)))) %>% 
  select(-date, -category, -OBS, -ni.agrupado, -familia, -species_old_1, -species_old_2)

# Adding dates

sampling_dates <- read.csv(here("data","sampling_dates.csv")) %>% 
  mutate(sampling = as.factor(sampling),
         date = ymd(date), 
         month = month(date, label = TRUE),
         day = day(date), 
         year = year(date)) %>% 
  select(sampling, date, day, month, year, one_month_window, omw_date) %>% 
  mutate(across(where(is.character), as.factor))


flora_rare <- flora_raw %>% 
  right_join(sampling_dates, by = join_by(sampling)) %>% 
  select(sampling, one_month_window, omw_date, plot, treatment,
         code, abundance, height, Cb, Db, Cm, Dm, date, month)

#Adding species information
species_code <- read.csv(here("data","species_code.csv")) %>% 
  select(species, code, family, genus_level, species_level, growing_type) %>%
  mutate(across(where(is.character), as.factor))


flora_rare <- merge(flora_rare, species_code, by = "code") 

# Morphological measurements}


# Adjustment: everything below 0.1 cm is transformed into 0.1 cm in order to avoid the effect of 
# pressing the stem with the caliber. 

flora_rare <- flora_rare %>%
  mutate(Dm = coalesce(ifelse(Dm < 0.1, 0.1, Dm), Dm))

flora_rare <- flora_rare %>%
  mutate(Db = coalesce(ifelse(Db < 0.1, 0.1, Db), Db))

## BIOMASS AT INDIVIDUAL LEVEL ####

#Transforming diameters into circumferences
flora_rare$cm <- round(ifelse(!is.na(flora_rare$Dm), flora_rare$Dm * pi, flora_rare$Cm), 2)
flora_rare$cb <- round(ifelse(!is.na(flora_rare$Db), flora_rare$Db * pi, flora_rare$Cb), 2)

#Calculating area of circle with circumference values
flora_rare$Ah <- ((flora_rare$cm)^2)/(4*pi)
flora_rare$Ab <- ((flora_rare$cb)^2)/(4*pi)


#Merging by families (poaceae, asteraceae)}

#At the first samplings, we were collecting information of all possible species. With the pass of time, we
# realized we could not identify every species at every sampling, 
taxongroups <- flora_rare %>%
  filter(code %in% c("poaceae", "asteraceae", "tosp", "orchidaceae"))%>%
  group_by(code, sampling, one_month_window, omw_date, plot, treatment, date, month, species, family, genus_level, species_level) %>%
  summarize(abundance = sum(unique(abundance), na.rm = T), #here we sum abundances 
            height = mean(height, na.rm = T),
            Ah = mean(Ah, na.rm = T),
            Ab = mean(Ab, na.rm = T))
  
species <- anti_join(flora_rare, taxongroups, by = "code") %>%
  group_by(code, sampling, one_month_window, omw_date, plot, treatment, date, month, species, family, genus_level, species_level) %>%
  summarize(abundance = mean(abundance, na.rm = T), #here we mean abundances (fake mean, species in the same plot and sampling have the same abundance info)
            height = mean(height, na.rm = T),
            Ah = mean(Ah, na.rm = T),
            Ab = mean(Ab, na.rm = T))

flora_medium <- bind_rows(taxongroups, species)


##Biomass equation
d <- 1.96
z <- 2/3
flora_medium$x <- (flora_medium$height/2)*(flora_medium$Ab + flora_medium$Ah)

flora_medium$biomass_i <- d*(flora_medium$x^z)


# RICHNESSS ########

flora_medium <- flora_medium %>% 
  group_by(plot, sampling) %>% 
  mutate(richness = n_distinct(code, na.rm = T)) %>% 
  ungroup()
  
# ABUNDANCE ########

flora_medium <- flora_medium %>% 
  group_by(plot, sampling) %>% 
  mutate(abundance_community = sum(abundance, na.rm = T)) %>% 
  ungroup()


flora_abrich <- flora_medium


```

## Biomass at species level

```{r Preparing db for biomass}

#| echo: false
#| warning: false

## BIOMASS AT SPECIES LEVEL ###########

#For biomass, we do not have information for samplings 0, 1, 2 and 12. 

flora_biomass_raw <- flora_medium %>% 
  filter(!sampling %in% c("0", "1", "2", "12")) %>%  # Remove samplings for which we have no morphological measurements
  filter(!is.na(x)) %>%                              # Remove rows where x is NA since we do not have morph. meas. for those datapoints
  filter(height > 5 & height < 200)               # Remove individuals with height < 5 cm or > 200 cm, because the equation does not properly work with them 

f_5_200 <- flora_medium %>% 
  filter(!(height > 5 & height < 200)) %>% 
  nrow() # Only 187 datapoints are lost


#There is no loss of species by taking out individuals with height > 5 cm
```

To avoid confounding effects with the perturbation, biomass sampling was performed by following a non-destructive methodology described in Pottier and Jabot, 2017, which estimates herbaceous dry biomass (g) using allometric equations. To do this, we took three biometric measurements of the plant: height ($H$, from the rooting point to the highest green area), basal circumference ( $A_b$, at ground level), and half height circumference ($A_h$, at mid-height). These parameters express the minimum volume of the plant, which is defined as the space occupied by the aerial organs of each individual when extended along the plant's longitudinal axis [@pottier2017]. These were measured with a measuring tape for the height, and a caliber or flexible measuring tape for the areas, depending on the thickness of the plant. A maximum of five individuals per species, sampling and plot were measured. For the taxonomic groups that aggregate several species, 10 individuals were measured when there were morphologically distinguishable species. We define an individual as [@perronne2021]: a ramet or collection of clumped ramets with the highest degree of physiological integration.

The total biomass of the community was calculated following the steps described below:

------------------------------------------------------------------------

### Estimation of biomass for the average individual 

The biomass per individual is estimated using the general equation model proposed by [@perronne2021]. Let *j* be the species and *i* the individual, where ($i_j$ $\epsilon$ $[1, n_j]$):

$$
\bar{B_{i_{j}}} = 1.96 \left[{\frac{\bar{H_{i_{j}}}}{2}}(\bar{A_{bi_{j}}} + \bar{A_{hi_{j}}})\right]^{2/3}
$$



where:\
- $\bar{B}$is the estimated biomass per average individual,\
- $\bar{H}$ is the average maximum plant height,\
- $\bar{A_b}$ is the mean basal area,\
- $\bar{A_h}$ is the mean mid-height area.

The values 1.96 and $2/3$ are commonly used in allometric estimations. We performed sensitivity analysis for these coefficients and finally conveyed with the authors about using the same values.The model only fits to individuals between 5 and 200 cm, so all individuals beyond those thresholds had to be removed. This modification did not affect the pool of species of the experiment and it only meant the rejection of `r round(f_5_200/nrow(flora_medium)*100, 2)`% datapoints.

------------------------------------------------------------------------

### Estimation of biomass at species level

The biomass at species level ($B_j$) is calculated by multiplying $B_i$ by the total number of individuals per square meter ($\delta$) for the species $j$ present in a plot at a given sampling. 

$$
B_j = \bar{B_{i_{j}}} \cdot \delta_j
$$

```{r Collecting information for number of individuals}

#| echo: false
#| warning: false

# To be able to estimate abundance based on the number of individuals we need data were abundance and number of individuals per species,
# plot and sampling were available. Since we have been learning the application of this non-destructive methodology in the go,
# we have 2 different groups of data:

#1.  Since sampling 12, we have been estimating the number of individuals per species and plot based on direct field observations.

plots <- read.csv(here("data", "plots.csv")) %>% 
  select(nplot, treatment_code) %>% 
  rename(treatment = treatment_code,
         plot = nplot)

nind1 <- read.csv(here("data", "n_individuals.csv")) %>% 
  merge(plots) %>% 
  select(sampling, treatment,  plot, code, abundance, nind_m2) %>%
  group_by(sampling, treatment, plot, code) %>%
  summarize(nind_m2 = sum(nind_m2), abundance = sum(abundance)) %>% 
  mutate(sampling = as.factor(sampling),
         treatment = as.factor(treatment), 
         plot = as.factor(plot), 
         code = as.factor(code), 
         nind_m2 = as.numeric(nind_m2), 
         abundance = as.numeric(abundance))

## Las especies de asteraceae que hemos agrupado por familia se recalculan sus individuos y abundancias aqu√≠

#2.  Up to sampling 11, We only measured the morphological parameters of 5 individuals per specie as maximum. 
#    If there were less than 5 species, we know that number was the total amount of individuals in the plot.

nind2<- flora_raw %>%
  filter(!sampling %in% c( "12", "13", "14", "15", "16", "17", "18", "19", "20"))  %>%
  group_by(sampling, treatment, plot, code) %>%
  mutate(n_individuals = n()) %>%
  group_by(sampling, treatment, plot, code, abundance) %>%
  summarize(nind_m2 = mean(n_individuals, na.rm = T)) %>%
  filter(nind_m2 < 5) 

nind <- bind_rows(nind1, nind2)

##| Plus*
##| There are some species for which we only have measured 1 individual per plot and sampling every time we have spot it.
##|  Therefore, for these species we do not need to estimate the number of individuals.
##|  In think is useful to keep a vector

one_ind_species <- c("rucr", "amsp", "kisp")



# Adding nind information to biomass data

biomass <- flora_biomass_raw

biomass <- merge(biomass, species_code)

biomass <- left_join(biomass, nind)



percNa <- sum(is.na(biomass$nind_m2)) /length(biomass$code) * 100

biomass$year <- year(biomass$date)




```

However, we have `r round(percNa, 2)`% NAs for $\delta_j$ since it was not collected across all samplings due to the novelty of the non-destructive method. NAs are randomly distributed through plots and species, yet they are concentrated on the first sampling season.

```{r nind_m2 NAs}
#| echo: false
#| warning: false


#Where are the NA's?

print(biomass %>% 
  mutate(cell_content = case_when(is.na(nind_m2) ~ "NA",
                                  !is.na(nind_m2)  ~ "nind_available")) %>%
  # we create a new variable capturing cell content
  # as we are interested in defining 3 different situations, we use the case_when function
  ggplot(aes(x = as.numeric(sampling))) +
  geom_histogram(aes(fill = cell_content),
                 binwidth = .5, center = 0) +
  scale_fill_discrete(drop = F) +
  labs(y = "Number of rows", y = "Sampling") +
  scale_x_continuous(breaks = scales::breaks_extended(n = 21)))

print(biomass %>% 
  mutate(cell_content = case_when(is.na(nind_m2) ~ "NA",
                                  !is.na(nind_m2)  ~ "nind_available")) %>%
  ggplot(aes(x = as.numeric(plot))) +
  geom_histogram(aes(fill = cell_content),
                 binwidth = .5, center = 0) +
  scale_fill_discrete(drop = F) +
  labs(y = "Number of rows", x = "Plot") +
  scale_x_continuous(breaks = scales::breaks_extended(n = 16)))


print(biomass %>% 
  mutate(cell_content = case_when(is.na(nind_m2) ~ "NA",
                                  !is.na(nind_m2)  ~ "nind_available")) %>%
  # we create a new variable capturing cell content
  # as we are interested in defining 3 different situations, we use the case_when function
  ggplot(aes(y = code)) +
  geom_bar(aes(fill = cell_content),
           binwidth = .5, center = 0) +
  scale_fill_discrete(drop = F) +
  labs(x = "Number of rows"))

#NA's seem to be concentrated in the first year, as we already knew
# NA's are randomly distributed across plots
# NA's are randomly distributed across species, but we can see some that have more than others like: 
# poaceae, coar or shar

# MICE #####
```

We used the *mice* package in R to address missing values of $\delta_j$, which performs multiple imputation by iteratively predicting missing values of $\delta_j$ using a Random Forest model trained on a set of chosen variables. In our case we used the variables year, sampling, plot, treatment, species, species family, richness, abundance at species level, total abundance, mean $H$, mean $A_h$, mean $A_b$ and $B_i$. Specifically, we generated 10 imputed datasets (ie. 10 possible values to fill NA) and run 300 iterations to ensure convergence. The results can be observed in the following figure, where blue dots represent the original values, and the red dots represents the values that have been produced by the model to fill the gaps.

```{r MICE}

#| warning: false

library(mice)

# Choosing varibales for imputation
biomass_mice <- biomass %>% 
  select(year, sampling, plot, treatment, code, family, richness, abundance, abundance_community,
         height, Ah, Ab, biomass_i, nind_m2) %>% 
  mutate(across(where(is.character), as.factor))

#biomass_mice_imputed <- mice(biomass_mice, method = "rf", m = 10, maxit = 300)
#saveRDS(biomass_mice_imputed, "data/biomass_mice_imputed.rds")
biomass_mice_imputed <- readRDS(here("data", "biomass_mice_imputed.rds"))

imputed_db <- complete(biomass_mice_imputed, action = "long")

imputed_db <- imputed_db %>% 
  group_by(plot, treatment, sampling, code) %>% 
  mutate(nind_m2_imputed = round(mean(nind_m2, 0)),
         sd_imputation = sd(nind_m2)) %>% 
  select(plot, treatment, sampling, code, nind_m2_imputed, sd_imputation) %>% 
  distinct()


imputed_db$label_imputation <- ifelse(is.na(biomass$nind_m2), 1, 0)

 print(mice_results <- ggplot(imputed_db, aes( x = sampling, y = nind_m2_imputed, color = as.factor(label_imputation))) +
    facet_wrap(~code, ncol = 7, nrow = 6)+
    geom_point(alpha = 0.5) +
    scale_color_manual(values = c("0" = "cyan3", "1" = "red3")) +
    scale_x_discrete(breaks = levels(imputed_db$sampling)[seq(1, length(levels(imputed_db$sampling)), by = 5)]) +  # Show every 2nd label
    labs(color = "Imputation"))

```

To ensure that the imputation was accurate enough, we needed to check stability and reliability.

-   **Stability** The stability of the of the imputed data was assessed by first, checking that the distribution of the imputed values followed the same distribution as the original data (Figures x and y), and second, by calculating the coefficient of variation, which presented an aggregate mean for the ten possible values iterated by the model of `r round(mean(imputed_db$CV),2)` $\pm$ `r round(sd(imputed_db$CV), 2)`(Figure z)

```{r MICE distribution of imputations}

#| echo: false
#| warning: false

# Distribution of imputed data and distribution of original data 

stripplot(biomass_mice_imputed, pch = 20, cex = 1.2)

```

Figure x: Blue dots represent the original values, while red dots indicate the imputed values. If the red dots align closely with the blue ones, it suggests that the imputation model produced stable estimates.

```{r MICE distribution of imputations2}

 #If imputed values (blue dots) align well with observed values, MICE is working well.
densityplot(biomass_mice_imputed)

```

Figure y: The density plot compares the distribution of imputed values (red) with the original values (blue). A close overlap between the two distributions indicates that the imputation model preserved the original data structure well.

```{r MICE stability of imputations}
#| echo: false
#| warning: false


imput_stability_db <- imputed_db %>% 
  filter(label_imputation == 1) %>% 
  mutate(CV = sd_imputation / nind_m2_imputed) %>% 
  as.data.frame()


#| echo: false
#| warning: false

print(imput_stability <- ggplot(imput_stability_db, aes(x = CV)) +
  geom_histogram(bins = 30, fill = "steelblue", color = "white", alpha = 0.8) +
  geom_vline(aes(xintercept = 1), color = "black", linetype = "dashed", size = 1) +
  scale_x_continuous(
    expand = expansion(mult = c(0.05, 0.1)),
    breaks = seq(0, max(imputed_db$sd_imputation / imputed_db$nind_m2_imputed, na.rm = TRUE), by = 0.2) # Adjust "by" as needed
  ) +
  labs(title = "Distribution of Coefficient of Variation for Imputed Values",
       x = "(SD/mean) Ratio",
       y = "Count") +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank(),
        plot.title = element_text(hjust = 0.5)))



```

Figure z: Distribution of the Coefficient of Variation (CV) for imputed values. The histogram shows the spread of CV values, with a dashed vertical line at CV = 1 as a reference. A lower CV suggests greater imputation stability, while higher values indicate greater variability in imputed values

```{r MICE reliability of imputations}
#| echo: false



stability_test <- read.csv(here("data", "stability_test.csv"))
```

-   **Reliability.** The reliability of the imputation was assessed by running the same Random Forest model on a subset of the original data (without missing values in $\delta_j$), where the same proportion of NAs was randomly generated. Since it is a random process, we run this "dummy model" six times. The imputation of this model appeared to work reasonably well. Aggregate mean of CV for the six iterations was `r round(mean(stability_test$CV, na.rm = T),2)` $\pm$ `r round(sd(stability_test$CV),2)`, which means the iterations were stable as in our real model.

```{r MICE reliability of imputations2}

#| warning: false
ggstability_test2 <- ggplot(stability_test, aes(y = CV)) +
  facet_wrap(~ counter, nrow = 1, ncol = 6 ) + 
  geom_boxplot(fill = "steelblue", color = "black", alpha = 0.8) +
  geom_hline(aes(yintercept = 1), color = "red", linetype = "dashed", size = 1) +
  labs(title = "Distribution of Coefficient of Variation for Imputed Values",
       x = NULL,  # Removes x-axis label
       y = "(SD/mean) Ratio") +
  theme(axis.text.x = element_blank(),  # Removes x-axis text
        axis.ticks.x = element_blank()) # Removes x-axis ticks

#reliability_db_combined <- imap_dfr(reliability_db_list, ~ mutate(.x, counter = .y))
#reliability_db_combined %>% write.csv("data/reliability_test.csv", row.names = F)

reliability_test <- read.csv(here("data", "reliability_test.csv")) %>% 
  mutate(counter = as.factor(counter))

#reliability_plot_combined <- imap_dfr(reliability_plot_list, ~ mutate(.x, counter = .y))
#reliability_plot_combined %>% write.csv("data/reliability_LM_test.csv", row.names = F)

reliability_LM_test <- read.csv(here("data", "reliability_LM_test.csv")) %>% 
  mutate(counter = as.factor(counter))

print(ggstability_test2)

```

Then, we performed a linear model between original $\delta_j$ values and imputed ones, for which we got an aggregate mean of $R^2$ of`r round(mean(reliability_test$R2),2)` $\pm$ `r round(sd(reliability_test$R2),2)`, which is low, but all iterations showed a positive linear relationship between original $\delta_j$ and imputed values as we can see in the following figures

```{r MICE reliability of imputations3}
ggreliability_test2 <-ggplot(reliability_test, aes(x = R2)) +
  geom_histogram(bins = 30, fill = "red4", color = "white", alpha = 0.8) +
  scale_x_continuous(
    expand = expansion(mult = c(0.05, 0.1)),
    breaks = seq(0, max(imputed_db$sd_imputation / imputed_db$nind_m2_imputed, na.rm = TRUE), by = 0.1) # Adjust "by" as needed
  ) +
  labs(title = "R2 for lm(imputed ~ original)",
       x = "R2",
       y = "Count") 

ggLM_test <- ggplot(reliability_LM_test, aes(x = nind_m2_original,
                                      y = nind_m2,
                                      color = as.factor(.imp))) + 
  facet_wrap(~ counter, nrow = 2, ncol = 3) +
  geom_point(alpha = 0.6, size = 0.3) + 
  geom_smooth(method = "lm", se = FALSE, size = 0.5) +
  stat_cor(aes(label = paste(after_stat(rr.label), after_stat(p.label), sep = "~`,`~")),  
           method = "pearson", 
           label.x.npc = "left", 
           label.y.npc = "top") + # Displays R¬≤ and p-value
  guides(color = "none") # Improve legend label




print(ggreliability_test2)
print(ggLM_test)

```

After this discussion, we could finally go ahead with the imputation results. Filling gaps with *mice* package, despite having limitations, was the best option out of the scenarios considered. Once we had $\delta_j$ for all species and samplings, we could calculate $B_j$.

```{r Merging imputation results with biomass database}

#| warning: false

biomass_imp <- biomass %>% 
  select(year, date, sampling, plot, code, species_level, genus_level, family,
         abundance, height, Ah, Ab, x, biomass_i, richness, abundance_community, nind_m2) %>% 
  left_join(imputed_db)


```

------------------------------------------------------------------------

### Removing outliers from biomass at species level

Outliers were removed from log-transformed $B_j$ using 1.5 IQR method to reduce noise that might have been accumulated across estimations.

```{r Biomass at SPECIES LEVEL and removing outliers}

#| warning: false

# Calculation of biomass at species level for both scenarios: with imputation of data with MICE and without it

biomass_imp <- biomass_imp %>% 
  mutate(biomass_s = nind_m2_imputed * biomass_i)

# Step 1: Calculate IQR for log-transformed biomass_s
Q1 <- quantile(log(biomass_imp$biomass_s), 0.25, na.rm = TRUE)
Q3 <- quantile(log(biomass_imp$biomass_s), 0.75, na.rm = TRUE)
IQR <- Q3 - Q1

# Step 2: Remove outliers
biomass_imp_clean<- biomass_imp %>%
  filter(log(biomass_s) >= Q1 - 1.5 * IQR & log(biomass_s) <= Q3 + 1.5 * IQR)

biomass_noimp <- biomass %>% 
  mutate(biomass_s = nind_m2* biomass_i, na.rm =T)  # We go ahead with the 18% of NA's of nind_m2

# Step 1: Calculate IQR for log-transformed biomass_s
Q1 <- quantile(log(biomass_noimp$biomass_s), 0.25, na.rm = TRUE)
Q3 <- quantile(log(biomass_noimp$biomass_s), 0.75, na.rm = TRUE)
IQR <- Q3 - Q1

# Step 2: Remove outliers
biomass_noimp_clean<- biomass_noimp %>%
  filter(log(biomass_s) >= Q1 - 1.5 * IQR & log(biomass_s) <= Q3 + 1.5 * IQR)


```



## Biomass at species level for samplings 0, 1 and 2

```{r Regression of biomass~abundance to fill 0,1&2 sampling gaps}
#| warning: false

codes_123 <- flora_medium %>% 
  filter(sampling %in% c("0", "1", "2"))


code_levels <- droplevels(codes_123$code)  # Drop unused levels first
code_levels <- levels(code_levels)       # Extract only the actual levels
gglist <- list()

lm_data <- matrix(nrow = length(code_levels), ncol = 8)
colnames(lm_data) <- c("code", "intercept", "slope", "r_squared", "p_value", "n_points_lm", "shapiro_pvalue", "smearing_factor")
lm_data <- as.data.frame(lm_data)

counter <- 0

library(broom)

for (i in 1:length(code_levels)) {
  
  code_i <- subset(biomass_imp, code == code_levels[i])
  
  if (nrow(code_i) < 2) next  # Skip if not enough data
  
  lm_i <- lm(log(biomass_s) ~ log(abundance), data = code_i)
  shapiro_i <- shapiro.test(residuals(lm_i))
  
  # Extract coefficients, R^2, and p-value
  lm_i_summary <- summary(lm_i)
  lm_i_tidy <- tidy(lm_i)
  lm_i_glance <- glance(lm_i)
  
  intercept_i <- lm_i_tidy$estimate[1]
  slope_i <- lm_i_tidy$estimate[2]
  r_squared_i <- lm_i_glance$r.squared
  p_value_i <- lm_i_tidy$p.value[2]
  n_observations_i <- nrow(code_i)
  smearing_factor_i <- mean(exp(residuals(lm_i)))  # When log-transformed a variable, a retransformation has to be done with a smearing factor
  
  counter <- counter + 1
  
  # Store results in lm_data dataframe
  lm_data$code[counter] <- code_levels[i]
  lm_data$intercept[counter] <- intercept_i
  lm_data$slope[counter] <- slope_i
  lm_data$r_squared[counter] <- r_squared_i
  lm_data$p_value[counter] <- p_value_i
  lm_data$n_points_lm[counter] <- n_observations_i
  lm_data$shapiro_pvalue[counter] <- shapiro_i$p.value
  lm_data$smearing_factor[counter] <- smearing_factor_i  # Store correctly
  
}

lm_data$posneg_slope <- ifelse(lm_data$slope < 0, paste("negative"), paste("positive"))
#hist(nind_lm_data$slope)
```

The same way the novelty of the non-destructive method application led us to miss some data on $\delta_j$, also resulted on lacking all morphological information for samplings 0, 1 and 2. To overcome this problem, we fitted a linear model $lm(log(B_j) \sim log(abundance_j))$ for the log-transformed variables to ensure normality. All species but 3 presented a good fit to the model ($p-value < 0.01 $). However, $R^2$ was between `r round(min(lm_data$r_squared), 2)` and `r round(max(lm_data$r_squared), 2)` (Fig. j). We considered that having a higher number of species would greatly benefit the interpretation of the results for biomass at community level. Thus, we decided to take in all species considering $p-value$ despite the simplification it compromises. 



```{r Regression of biomass~abundance results}
#Let's check results
results <- 
  ggplot(lm_data, aes( x = r_squared, y = p_value, 
                       label = paste(code, n_points_lm, sep = ", "),
                       color = posneg_slope))+
  geom_point()+ 
  geom_hline(yintercept = 0.05, linetype = "dashed", color = "gray40") +
  
  geom_text_repel(
    size = 3,                # Text size
    min.segment.length = 0.1,  # Ensures lines are always drawn
    segment.color = "gray50",# Line color
    segment.size = 0.5, 
    max.overlaps = 15# Line thickness
  )

print(results)

#print(results)

# Criteria: ???? 

lm_data_filtered <- lm_data %>% 
  filter(p_value < 0.05)
```

Figure j: Plot of $R^2$ in the x-axis and $p-value$ in y-axis. A dashed line is drawn in x = 0.01. 


Since we log-transformed both variables, to estimate biomass $B$ for the species $j$, we applied the formula

$$
B_j = exp(a_j + b_j ¬∑log(abundance_j))¬∑exp({\frac{\sigma^2_j}{2}})
$$

where:\
- $a$ and $b$ are the incercept and slope of the model,\
- $\sigma^2$ is the variance of the residual errors in a log-transformed regression model,\
- $exp({\frac{\sigma^2_j}{2}})$ is the smearing factor, which corrects the bias introduced by log-transforming a linear regression model and then back-transforming to the original scale. (**Introducir referencia: Duan 1983 ? )


```{r Regression of biomass~abundance to fill 0,1&2 sampling gaps: estimating biomass}

#| warning: false

flora_medium012 <- left_join(flora_medium, lm_data_filtered) %>%
  filter(sampling %in% c("0", "1", "2")) %>% 
  mutate(year = year(date)) %>% 
  mutate(abundance = ifelse(abundance < 1, 1, abundance)) %>% 
  mutate(biomass_s = exp(intercept + slope * log(abundance)) * smearing_factor)

biomass_imp_clean_012 <- bind_rows(biomass_imp_clean, flora_medium012) 

biomass_noimp_clean_012 <- bind_rows(biomass_noimp_clean, flora_medium012)

```

## Biomass at community level

The total biomass of the community was calculated by summing the total biomass of each species ($j$), where ($\alpha$) is the total number of identified species in each plot.

$$
B = \sum_{j=1}^{\alpha} B_j
$$

```{r Community biomass calculation}

#| echo: false
#| warning: false

#Calculation of total biomasss (community biomass) by summing all biomass at species level per square meter
# I will keep the flora_biomass not cleaned in order to compare results with and without outliers

biomass_imp <- biomass_imp_clean_012 %>% 
  group_by(plot, sampling, treatment) %>% 
  mutate(biomass_community =  sum(biomass_s, na.rm = TRUE)) %>%
  ungroup() 

biomass_noimp <- biomass_noimp_clean_012 %>% 
  group_by(plot, sampling, treatment) %>% 
  mutate(biomass_community =  sum(biomass_s, na.rm = TRUE)) %>%
  ungroup()

```
