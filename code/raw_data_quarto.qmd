---
title: "Arkaute raw data"
author: "Javier Porras"
date: today
format:
  html:
    toc: true
    toc-depth: 3
    code-fold: true
    number-sections: true
    embed-resources: true
editor: visual
bibliography: "C:/Users/javier.porras/Documents/dynamics_arkaute/code/experiment_references.bib"
---

## Opening and preparing database


```{r Code settings}
#| warning: false

rm(list = ls(all.names = TRUE))
pacman::p_load(dplyr, reshape2, tidyverse, lubridate, ggplot2, ggpubr, ggrepel)


#setwd("C:/Users/javier.porras/Documents/dynamics_arkaute")

theme_set(theme_bw() +
            theme(
                  legend.position = "right",
                  panel.grid = element_blank(),
                  strip.background = element_blank(),
                  strip.text = element_text(face = "bold"),
                  text = element_text(size = 11)))
```

All the raw data information we have present an assymetrical distribution.

* Abundance
* Morphological parameters: 
    + Height (H, cm)
    + Diameter at half height (Dm, cm)
    + Circumference at half heiht (Cm, cm)
    + Diameter at the base (Db, cm)
    + Circumference at the base (Cb, cm)
  

```{r Opening database}
#| warning: false

library(here)

flora_raw <- read.csv(here::here("data", "flora_db_raw.csv"))

flora_raw <- flora_raw %>%
  mutate(across(where(is.character), as.factor))

flora_raw$plot <- factor(flora_raw$plot)


flora_raw$sampling <- factor(flora_raw$sampling, levels = sort(unique(flora_raw$sampling)))
flora_raw$treatment <- factor(flora_raw$treatment, levels =  c("c", "w", "p", "wp") )
flora_raw$plot <- factor(flora_raw$plot, levels = sort(unique(flora_raw$plot)))

flora_raw <- select(flora_raw, -date, -category, -OBS, -ni.agrupado, -familia, -species_old_1, -species_old_2)

par(mfrow = c(2,3))
boxplot(flora_raw$abundance, main = "Abundance")
boxplot(flora_raw$height, main = "Height")
boxplot(flora_raw$Dm, main = "Diameter half heihgt")
boxplot(flora_raw$Cm, main = "Circumference half height")
boxplot(flora_raw$Db, main = "Diameter at the base")
boxplot(flora_raw$Cb, main = "Circumference at the base")
```

We add sampling dates using the package *lubridate* and the database "sampling_dates.csv" where we kept a record of all dates. 


```{r Adding sampling dates information}
#| warning: false

# Adding dates
sampling_dates <- read.csv(here("data", "sampling_dates.csv"))
sampling_dates$sampling <- factor(sampling_dates$sampling)

sampling_dates$date <-  ymd(sampling_dates$date)
sampling_dates$month <- month(sampling_dates$date, label = TRUE)
sampling_dates$day <- day(sampling_dates$date)
sampling_dates$year <- year(sampling_dates$date)

sampling_dates <- sampling_dates %>% 
  select(sampling, date, day, month, year, one_month_window, omw_date)

sampling_dates <- sampling_dates %>%
  mutate(across(where(is.character), as.factor))

flora_raw <- right_join(flora_raw, sampling_dates, by = join_by(sampling))

flora_rare <- flora_raw %>% select(sampling, one_month_window, omw_date, plot, treatment, code, abundance, height, Cb, Db, Cm, Dm, date, month)
```

We also added species information by adding the database "species_code.csv" and merging it by "code", which is the abrevitation we have used for the species. Each code is a word of four letters, the first two being the first two letters of the genus, and the last two letters being the first two letter os the species. Example: For the species *Convolvus arvensis* we used the code *coar*, while for the species *Ranunculus bulbosus* we used the code *rabu*. 

```{r Adding species information}
#| warning: false

#Adding species information
species_code <- read.csv(here("data", "species_code.csv"))
species_code <- select(species_code, species, code, family, genus_level, species_level)
species_code <- species_code %>%
  mutate(across(where(is.character), as.factor))

flora_rare <- merge(flora_rare, species_code, by = "code") 

```

A change we had to make to the database is adding 0.01 cm to both Dm and Db since the tool we used was calibrated at -0.01 cm. 

```{r Change to diameter }
#| warning: false

# Cambios de los datos morfológicos antes de agrupar la base de datos por especie, muestro y sampling 

#Sumar 0.01 cm a los diámetros por el error del calibre con el que medimos
flora_rare$Dm <- flora_rare$Dm + 0.01
flora_rare$Db <- flora_rare$Db + 0.01

```



### Checking errors

```{r}
#| echo: false

# Checking for errors:

# Is there any line with less than 2 NA between height, cb, cm, db and dm?  This is: did we slip some extra data in some lines?
error1 <- nrow({checking <- flora_raw %>%
  filter(rowSums(is.na(select(., height, Cb, Db, Cm, Dm))) < 2)})

#is there any line with more than 2 NA among the same variables? This is: are we missing some data?
error2 <- nrow({checking2 <- flora_raw %>%
  filter(rowSums(is.na(select(., height, Cb, Db, Cm, Dm))) > 2) %>%
  filter(!sampling %in% c("0", "1", "2","3", "12"))})

```

We have to check all possible mistakes found within the database due to errors at field or database building. 

1) Is there any line with less than 2 NA between height, cb, cm, db and dm?  This is: did we slip some extra data in some lines? The answer is: `r error1`

2) Is there any line with more than 2 NA among the same variables? This is: are we missing some data? The answer is: `r error2`
For this last question, I have filtered by excluding the samplings 0, 1, 2, 3 and 12. This is because during samplings 0, 1 and 2 we only measured height, for the sampling 3 (first sampling performing non-destructive methodology) we missed some individuals, and for sampling 12 we could not do biomass for several reasons. 


After that, we can check several plots in order to see the relationship between the morphological parameters and check if there is any dot that seems to be off the chart. 

** no consigo cargar los plots



## VARIABLES 

### Biomass at individual level: applying allometric equation

1. First thing we have to do is to transform the diameters into circumferences
```{r Biomass species level 1}
#Transforming diameters into circumferences
flora_rare$cm <- round(ifelse(!is.na(flora_rare$Dm), flora_rare$Dm * pi, flora_rare$Cm), 2)
flora_rare$cb <- round(ifelse(!is.na(flora_rare$Db), flora_rare$Db * pi, flora_rare$Cb), 2)
```

2. Then, we calculate the area at base level and at half height using bot Cm and Cb

```{r Biomass species level 2}
#Calculating area of circle with circumference values
flora_rare$Ah <- ((flora_rare$cm)^2)/(4*pi)
flora_rare$Ab <- ((flora_rare$cb)^2)/(4*pi)
```



```{r Biomass species level 2.1}

#| echo: false

  #Checking if the area of any individual is above 1 square meter
biggerthan1<- nrow({checkingNA <- flora_rare %>%
  filter(rowSums(is.na(select(., height, Ah, Ab))) > 1) %>%
  filter(!sampling %in% c("0", "1", "2", "3", "12"))})
```
We can check if there is any individual with an area bigger than 1 m^2^. And the result is that there is `r biggerthan1` species under that condition. 

3. Agrupation of taxonomical groups and calculation of mean values for morphological values. At the first samplings, we were collecting information of all possible species. With the pass of time, we realized we could not identify every species at every sampling due to the abscence of flowers or fruits. That is why we decided to group those species into a higher taxonomical categories. This is the case of the families *poaceae*, *asteraceae*, *orchidaceae* and the genus *Torilis*. Here we calculate the abundance of these groups by summing all data of abundance per sampling and plot. Example: if we took abundance fromm a plot in the sampling 1, we might have included 5 poaceae species. That means, we are including 5 datapoints about abundance. Since we are aggregating these species into the family group, we need to sum all these abundances in order to know how much space was the poaceae group occupying at the time. It is important to mention that there are some poaceae species like *Dactilys glomerata* or *Festuca arundinacea* that we could identify. Same happens for asteraceae group. Besides, in this step we calculate the average value for height, the area at base level (Ab) and the area at half height (Ah). 

```{r Biomass species level 3, warning= FALSE}

#| warning: false


taxongroups <- flora_rare %>%
  filter(code %in% c("poaceae", "asteraceae", "tosp", "orchidaceae"))%>%
  group_by(code, sampling, one_month_window, omw_date, plot, treatment, date, month, species, family, genus_level, species_level) %>%
  summarize(abundance = sum(unique(abundance), na.rm = T), #here we sum abundances 
            height = mean(height, na.rm = T),
            Ah = mean(Ah, na.rm = T),
            Ab = mean(Ab, na.rm = T), 
            .groups = "drop")

  
species <- anti_join(flora_rare, taxongroups, by = "code") %>%
  group_by(code, sampling, one_month_window, omw_date, plot, treatment, date, month, species, family, genus_level, species_level) %>%
  summarize(abundance = mean(abundance, na.rm = T), #here we mean abundances (fake mean, species in the same plot and sampling have the same abundance info)
            height = mean(height, na.rm = T),
            Ah = mean(Ah, na.rm = T),
            Ab = mean(Ab, na.rm = T),
            .groups = "drop")

flora_medium <- bind_rows(taxongroups, species)

```

4. Once we have reduced the database by calculating the mean value of height, Ah and Ab per species, plot and sampling, we have a database where in every measured plot we have 1 row per species mainly containing sampling, date, plot, treatment, species code, height, Ah, Ab. Now, we can apply the biomass equation. This way we calculate the mean biomass of one individual for each species (biomass_i).

```{r Biomass species level 4}
#| warning: false

d <- 1.96
z <- 2/3
flora_medium$x <- (flora_medium$height/2)*(flora_medium$Ab + flora_medium$Ah)

flora_medium$biomass_i <- d*(flora_medium$x^z)

```



### Richness

To add the richness information per plot and sampling, we just count the number of different species within each combination of plot and sampling. 

```{r richness}
#| warning: false

flora_medium <- flora_medium %>% 
  group_by(plot, sampling) %>% 
  mutate(richness = n_distinct(code, na.rm = T)) %>% 
  ungroup()
  

```

### Abundance at community level

To calculate the abundance at community level (this is: total abundance of each plot at each sampling), we have to add the relative abundance of each species within the plots. 

```{r abundance}
#| warning: false
flora_medium <- flora_medium %>% 
  group_by(plot, sampling) %>% 
  mutate(abundance_community = sum(abundance, na.rm = T)) %>% 
  ungroup()


flora_abrich <- flora_medium

```

At this point we can take a look to some plot to have an idea of how relevant our species are in the experiment. 
In the plot 1 we see boxplots of abundance with the mean value as a red point. 
In the plot 2 we see a the number of observations (this is: how many times the species has been spotted throughout the experiment) distribution as a function of the mean abundance of each species. 
In the plot 3 we only see the number of observations 

```{r plots, echo = FALSE, warning = FALSE}

#| echo: false
#| warning: false

flora_medium$code_ordered <- reorder(flora_medium$code, -flora_medium$abundance, FUN = mean)

ggplot(flora_medium, aes(x = code_ordered, y = abundance)) +
  geom_boxplot() +
  stat_summary(fun = mean, geom = "point", shape = 20, size = 2, color = "red") +
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))

flora_nobs <- flora_medium %>% 
  group_by(code) %>% 
  summarize(n_observations= n(),
            mean_abundance = mean(abundance))

flora_nobs$abnobs <- flora_nobs$mean_abundance * flora_nobs$n_observations

ggplot(flora_nobs, aes(x = mean_abundance, y = n_observations, label = code, color = abnobs))+
  geom_point() + 
  scale_color_gradient(low = "blue4", high = "red2") +  
  geom_text_repel(
    size = 3,                # Text size
    min.segment.length = 0.1,  # Ensures lines are always drawn
    segment.color = "gray50",  # Line color
    segment.size = 0.5         # Line thickness
  )

flora_nobs$code_nobs <- factor(flora_nobs$code,
                               levels = flora_nobs$code[order(flora_nobs$n_observations, decreasing = TRUE)])
ggplot(flora_nobs, aes(x = code_nobs, y = n_observations, fill = n_observations)) +
  geom_col() +
  scale_fill_gradient(low = "blue4", high = "red2") +  # Apply color gradient from blue to red
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1)) + 
  labs(fill = "n obs")  # Add a color scale label





```

### Biomass at species level


The first thing to do with biomass is to filter from the database all samplings for which we do not have any information about biomass. This is sampling 0, 1, 2 and 12. 
```{r biomass com 1}
#| warning: false

#For biomass, we do not have information for samplings 0, 1, 2 and 12. 

flora_biomass_raw <- flora_medium %>% 
  filter(!sampling %in% c("0", "1", "2", "12"))

```


To calculate the biomass at species level (biomass_s) on a plot and sampling based on the biomass at individual level (biomass_i) we need to know the number of individuals that were on that plot for that species. biomass_i is just the mean biomass of an individual of a certain species. Therefore, we need to know the number of individuals per square metre or plot (nind_m2) in oder to know the total amount of biomass per species on a plot (biomass_s). This way biomass_s = biomass_i * nind_m2. However, the information about nind_m2 is not available for all species at all plots and samplings. Therefore, we have to estimate it based on the available information.

#### Biomass at species level of "lonely" species

But, before that, we know that there are some species for which we only have measured 1 individual per plot and sampling every time we have spot it. Therefore, for these species we do not need to estimate the number of individuals. In this case, biomass_i = biomass_s. These species are *Rumex crispus*, *Amaranthus sp.*, *Kickxia supuria* and an unidentified species of the family *brasicaceae*.


```{r one individual species for biomass}
#| warning: false
#| echo: false

one_ind_species <- c("rucr", "amsp", "kisp","brasicaceae")

flora_biomass_oneind <- flora_biomass_raw %>% 
  filter(code %in% one_ind_species)

flora_biomass_oneind$biomass_s <- flora_biomass_oneind$biomass_i

flora_biomass_oneind <- flora_biomass_oneind %>% 
  group_by(sampling, plot, code) %>% 
  mutate(n_observations = n()) %>% 
  ungroup()
  
flora_biomass_raw <- flora_biomass_raw %>% 
  filter(!code %in% one_ind_species)
```

#### Estimation of number of individuals: available data

Once we have that information we can proceed to estimate the number of individuals. 

To be able to estimate abundance based on the number of individuals we need data were abundance and number of individuals per species, plot and sampling were available. Since we have been learning the application of this non-destructive methodology on the go, we have 2 different groups of data:

1. Group 1 (nind1): Since sampling 12, we have been estimating the number of individuals per species and plot based on direct field observations.

```{r Estimating number of individuals: group 1}
#| warning: false

nind1 <- read.csv(here("data","n_individuals.csv"))
plots <- read.csv(here("data", "plots.csv")) %>% 
  select(nplot, treatment_code) %>% 
  rename(treatment = treatment_code,
         plot = nplot)

nind1 <- merge(nind1, plots)

#source("code/first_script_old.R")

nind1$code <- as.factor(nind1$code)

nind1 <- nind1 %>% 
  select(sampling, treatment,  plot, code, nind_m2, abundance)
  
#flora_nind <-  flora %>% select(code, family) %>% distinct(code, .keep_all = TRUE)

nind1 <- nind1 %>%
  group_by(sampling, treatment, plot, code) %>%
  summarize(nind_m2 = sum(nind_m2), abundance = sum(abundance))

{
nind1$sampling <- as.factor(nind1$sampling)
nind1$treatment <- as.factor(nind1$treatment)
nind1$plot <- as.factor(nind1$plot)
nind1$code <- as.factor(nind1$code)
nind1$nind_m2 <- as.numeric(nind1$nind_m2)
nind1$abundance <- as.numeric(nind1$abundance)}

## Las especies de asteraceae que hemos agrupado por familia se recalculan sus individuos y abundancias aquí
```


2. Group 2 (nind2): Up to sampling 11, We only measured the morphological parameters of 5 individuals per specie as maximum. If there were less than 5 species, we know that number was the total amount of individuals in the plot.

```{r Estimating number of individuals: group 2}
#| warning: false

nind2 <- flora_raw %>%
  filter(!sampling %in% c("12", "13", "14", "15", "16", "17", "18", "19", "20"))  %>%
  group_by(sampling, treatment, plot, code) %>%
  mutate(n_individuals = n())

nind2 <- nind2 %>%
  group_by(sampling, plot, treatment, code, abundance) %>%
  summarize(n_individuals_mean = mean(n_individuals, na.rm = T))  #corrección de asteraceae y poaceae #corrección de asteraceae y poaceae

nind2 <- nind2 %>%
  filter(n_individuals_mean < 5)
names(nind2)[names(nind2) == "n_individuals_mean"] <- "nind_m2"

nind <- full_join(nind1, nind2)

```

Once we have both groups, we can merge both groups by binding rows. 
```{r Estimating number of individuals: merging groups}
#| warning: false

#Mergin group 1 and group 2
nind <- bind_rows(nind1, nind2)
```

Question:  if we have some species for which the number of individuals measured in the plot was the total amount of individuals in that plot (this is, when there were less than 5 individuals per species), why are we not calculating the biomass of those species as biomass_s = biomass_1 + biomass_2 ... + biomass_i ? I think this is worthy to be considered. At the begining we did do this. But, I think we decided that, for the shake of consistency, we do not want to mix biomass_s estimation approaches for the same species. For the case of one_ind_species, these species have only been spotted isolately. Therefore, biomass_i = biomass_s is valid for these species since it will be the only approach used for them. However, if for *Potentilla reptans* we use one approach (summing individual biomass when nind < 5) at certain moments and another approach (estimation of nind_m2 when nind >5), the noise might be higher. **We could, maybe, try it?**

#### Estimation of number of individuals: linear model

Once that we have the database to establish the estimation, we have applied a linear regression model where we plot the number of individuals per m$^2$ as a function of abundance. For the lineal regression we applied the code: lm(nind_m2 \~ abundance). 


```{r linear regression 1}
#| warning: false

nind$code <- as.character(nind$code)

#The lm model is actually no needed for species "rucr", "amsp", "kips" and "brasicaceae" since these are
# just one individual found in one plot at different times. So the estimated biomass will be for 1 square meter
nind <- nind %>% 
  filter(!code %in% one_ind_species)


code_levels <- unique(nind$code)
gglist <- list()

nind_lm_data <- matrix(nrow = length(code_levels), ncol = 6)
colnames(nind_lm_data) <- c("code", "intercept", "slope", "r_squared", "p_value", "n_observations")
nind_lm_data <- as.data.frame(nind_lm_data)

counter <- 0

library(broom)

for (i in 1: length(code_levels)) {
  
  nind_i <- subset(nind, code == code_levels[i])
  lm_i <- lm(nind_m2 ~ abundance, data = nind_i)
  
  # Extract coefficients, R^2, and p-value
  lm_i_summary <- summary(lm_i)
  lm_i_tidy <- tidy(lm_i)
  lm_i_glance <- glance(lm_i)
  
  intercept_i <- lm_i_tidy$estimate[1]
  slope_i <- lm_i_tidy$estimate[2]
  r_squared_i <- lm_i_glance$r.squared
  p_value_i <- lm_i_tidy$p.value[2]
  n_observations_i <- nrow(nind_i)
  
  counter <- counter + 1
  
  gglist[[counter]] <- ggplot(nind_i, aes(x = abundance, y = nind_m2)) +
    geom_point() +
    geom_smooth(method = "lm", se = FALSE, color = "black") +
    labs(title = paste("LM ", code_levels[i]),
         subtitle = paste("Equation: y =", round(intercept_i, 2), "+", round(slope_i, 2), "* x\n",
                          "R2:", round(r_squared_i, 2), ", p-value:", round(p_value_i, 4), "\n",
                          "n observations", n_observations_i),
         x = "Abundance",
         y = "Numbers of individual per m2") +
    theme_minimal()
  
  nind_lm_data$code[counter] <- code_levels[i]
  nind_lm_data$intercept[counter] <- intercept_i
  nind_lm_data$slope[counter] <- slope_i
  nind_lm_data$r_squared[counter] <- r_squared_i
  nind_lm_data$p_value[counter] <- p_value_i
  nind_lm_data$n_observations[counter] <- n_observations_i
  
  
}

print(gglist[[9]])

```

For this linear regression 2 questions arise: 
1. Is the relationship between abundance and number of individuals/m$^2$ influenced by treatment? 
2. Which species do we choose and following which criteria? 


For the first question we take a look to the following plots: 

```{r linear regression exploration}
#| warning: false
#| fig-width: 6
#| fig-height: 9

code_levels <- unique(nind$code)
gglist <- list()

nind_lm_data <- matrix(nrow = length(code_levels), ncol = 6)
colnames(nind_lm_data) <- c("code", "intercept", "slope", "r_squared", "p_value", "n_observations")
nind_lm_data <- as.data.frame(nind_lm_data)

counter <- 0

library(broom)

for (i in 1: length(code_levels)) {
  
  nind_i <- subset(nind, code == code_levels[i])
  lm_i <- lm(nind_m2 ~ abundance, data = nind_i)
  
  # Extract coefficients, R^2, and p-value
  lm_i_summary <- summary(lm_i)
  lm_i_tidy <- tidy(lm_i)
  lm_i_glance <- glance(lm_i)
  
  intercept_i <- lm_i_tidy$estimate[1]
  slope_i <- lm_i_tidy$estimate[2]
  r_squared_i <- lm_i_glance$r.squared
  p_value_i <- lm_i_tidy$p.value[2]
  n_observations_i <- nrow(nind_i)
  
  counter <- counter + 1
  
  gglist[[counter]] <- ggplot(nind_i, aes(x = abundance, y = nind_m2)) +
    geom_point(aes(color = treatment), alpha = 0.5) +
    scale_colour_manual(values = c("c" = "green2", "w" = "red", "p" = "blue3", "wp" = "purple")) +
    geom_smooth(method = "lm", se = FALSE, color = "black") +
    labs(title = paste("LM ", code_levels[i]),
         subtitle = paste("Equation: y =", round(intercept_i, 2), "+", round(slope_i, 2), "* x\n",
                          "R2:", round(r_squared_i, 2), ", p-value:", round(p_value_i, 4), "\n",
                          "n observations", n_observations_i),
         x = "Abundance",
         y = "Numbers of individual per m2") +
    theme_minimal()
  
  nind_lm_data$code[counter] <- code_levels[i]
  nind_lm_data$intercept[counter] <- intercept_i
  nind_lm_data$slope[counter] <- slope_i
  nind_lm_data$r_squared[counter] <- r_squared_i
  nind_lm_data$p_value[counter] <- p_value_i
  nind_lm_data$n_observations[counter] <- n_observations_i
  
  
}


ggarrange(gglist[[1]], gglist[[2]], gglist[[3]], 
          gglist[[4]], gglist[[5]], gglist[[6]], 
          ncol = 2, nrow = 3)

ggarrange(gglist[[7]], gglist[[8]], gglist[[9]], 
          gglist[[10]], gglist[[11]], gglist[[12]], 
          ncol = 2, nrow = 3)

ggarrange(gglist[[13]], gglist[[14]], gglist[[15]], 
          gglist[[16]], gglist[[17]], gglist[[18]], 
          ncol = 2, nrow = 3)

ggarrange(gglist[[19]], gglist[[20]], gglist[[21]], 
          gglist[[22]], gglist[[23]], gglist[[24]], 
          ncol = 2, nrow = 3)

ggarrange(gglist[[25]], gglist[[26]], gglist[[27]], 
          gglist[[28]], gglist[[29]], gglist[[30]], 
          ncol = 2, nrow = 3)

ggarrange(gglist[[31]], gglist[[32]], gglist[[33]], 
          gglist[[34]], gglist[[35]], gglist[[36]], 
          ncol = 2, nrow = 3)




```

```{r linear regression exploration0}
#| echo: false
#| 
gglist[[37]]


```

There are some groups, like poaceae, where we can see a differentiation between treatments. But it is difficult to see a pattern 

And also to this one, where I aggregate all species into the 4 treatments. This way we can see if the distribution of points is more concentrated in certain regions: 

```{r linear regression exploration 1}
#| warning: false

ggplot(nind, aes(x = abundance, y = nind_m2)) + 
  facet_wrap(~ treatment) +
  geom_point(aes(color = treatment), shape = 15, alpha = 0.5) +
  scale_colour_manual(values = c("c" = "green2", "w" = "red", "p" = "blue", "wp" = "purple")) +
  scale_fill_manual(values = c("c" = "green2", "w" = "red", "p" = "blue", "wp" = "purple")) +
  geom_smooth(method = "lm", se = FALSE, color = "black")


```

Control and warming seem to be a little bit more scattered while perturbation and warming+perturbation appear to be more concentrated into the low abundance - low nind_m2. To ensure there are no significant differences among treatments, we visualize all four treatments together in a single plot. Each treatment is represented by distinct colors and enclosed within 99% confidence ellipses. Additionally, a linear regression trend line is included to observe overall patterns in the data:

```{r linear regression exploration 2}
#| warning: false

ggplot(nind, aes(x = abundance, y = nind_m2)) + 
  geom_point(aes(color = treatment, shape = treatment), alpha = 0.5) +
  stat_ellipse(geom = "polygon", aes(fill = treatment),
                 alpha = 0.2,
                 show.legend = FALSE,
                 level = 0.99) +
  scale_colour_manual(values = c("c" = "green2", "w" = "red", "p" = "blue", "wp" = "purple")) +
  scale_fill_manual(values = c("c" = "green2", "w" = "red", "p" = "blue", "wp" = "purple")) +
  geom_smooth(method = "lm", se = FALSE, color = "black")

```


Since it appears there are no considerable differences between treatments in abundance - nind_m2 distribution, we can go ahead with treatment aggregation. 

To answer the second question we have to take a look to how well the model fits to all our species. 

```{r linear regression 2}
#| warning: false

nind_lm_data$posneg_slope <- ifelse(nind_lm_data$slope < 0, paste("negative"), paste("positive"))
#hist(nind_lm_data$slope)

#Let's check results
results <- 
  ggplot(nind_lm_data, aes( x = r_squared, y = p_value, 
                            label = paste(code, n_observations, sep = ", "), color = posneg_slope))+
  geom_point()+ 
  geom_hline(yintercept = 0.1, linetype = "dashed", color = "gray40") +
  geom_vline(xintercept = 0.3, linetype = "dashed", color = "gray40") +
  
  geom_text_repel(
    size = 3,                # Text size
    min.segment.length = 0.1,  # Ensures lines are always drawn
    segment.color = "gray50",# Line color
    segment.size = 0.5, 
    max.overlaps = 15
  )

print(results)

```

```{r linear regression 2.1}
#| warning: false

#source(here("code", "0.1disaggregating_lm_bytreatment.R"))
#
#results_treatments
#shared_codes 


```


Here we can see the p-value in y-axis and the R$^2$ value in the x-axis. In orange, we can see the species for which the slope is negative. 2 dashed lines have been drew in p-value = 0.1 y R$^2$ = 0.3. In this scenario, *we would pick those species for which the model fits within p-value < 0.1 and R$^2$ > 0.3 for next stpeps*. In this case, 50% of species (20 species) would be used.

However, using R$^2$ > 0.3 is an arbitrary decision. The significance of the model is given by the p-value, while R$^2$ explains how scattered the data is. We can make a sensitivity analysis. 


```{r linear regression 3}
#| warning: false

#The lm model fits well (R^2 >= 0.3 and p-value < 0.1) for a few species: 
# !! Why do we choose R2 0.3?

source(here("code", "0.2sensitivity_analysis_lm.R"))
#The plot A is nind_lm_species, B is nind_lm_species_1 and C is nind_lm_species_2
ggarrange(a,b,c,
          labels = c("A", "B", "C"),
          nrow = 1, 
          ncol = 3)


```

Therefore, we can assess which set of species we use based on the p-value and R$^2$. 

Before going ahead, we can check if treatment has an effect on the linear model significance for species:  


We see there are many species for which the linear model properly fit. However, if we take into account all shared species between the 4 treatments that are below p-value = 0.1. Having a linear model per treatment would be much accurate, but we can not do it. 


I get the following table: 


:::{.callout title="Linear model outputs" collapse="show"}
```{r linear regression 5}
#| echo: false
#| warning: false

 knitr::kable(head(nind_lm_species_2))

```
:::

#### Calculation of number of individuals per square metre 

The resulting table is integrated with the biomass database so we can calculate the number of individuals per m$^2$ for all rows. 

```{r nind_m2 calculation 1}

flora_biomass_lm <- merge(flora_biomass_raw, nind_lm_species_2)

flora_biomass_lm$nind_m2 <-
  flora_biomass_lm$intercept + flora_biomass_lm$abundance * flora_biomass_lm$slope

```

 Since there are some species for which its intercept is negative, the lm consider that nind_m2 < 0 when abundance = 0, and that cannot be the case. This happens for 3 species. We can either delete these species or make *this "dummy" correction by saying that if nind_m2 < 0 , then nind_m2 = 1.*

```{r nind_m2 calculation 2}
#| warning: false
#
# Dummy correction ?????????????????????????????????????
flora_biomass_lm <- flora_biomass_lm %>%
  mutate(nind_m2 = ifelse(nind_m2 < 0, 1, nind_m2))
```

#### Calculation of biomass at species level +

Calculation of species biomass (biomass_s) per square meter by multiplying biomass at individual (biomass_i) level by the number of individuals per square meter (nind_m2)

```{r nind_m2 calculation 3}
flora_biomass_lm$biomass_s <- flora_biomass_lm$biomass_i * flora_biomass_lm$nind_m2
```

Then, I join the "lonely" species biomass database and the linear model species database. 

```{r nind_m2 calculation 4}

#Putting together lm species and one ind species
flora_biomass <- bind_rows(flora_biomass_oneind, flora_biomass_lm)

```


#### Outliers of biomass_s

At this point, it is worth considering the removal of outlier for biomass_s. To reach this information we have: 
1) Used abundance data gathered from the field by direct observations
2) Used morphological measurements taken in the field in the application of a biomass equation
3) Used the available data of number of individuals / m2 and species that was gathered in the field by visual estimation
4) Used a linear model to estimate the number of individuals per m2 for all species, samplings and plots. 
5) Calculated the biomass at species level by biomass_i * nind_m2. 

So, here there are many calculations that might had led to error accumulation. 


```{r outliers 1}

par(mfrow = c(2,2))
boxplot(flora_biomass$biomass_s, main = "biomass_s")
hist(flora_biomass$biomass_s, breaks = 50, main = "biomass_s")

#With log transformation
boxplot(log(flora_biomass$biomass_s), main = "log(biomass_s)")
hist(log(flora_biomass$biomass_s), breaks = 50, main = "log(biomass_s)")

```


```{r outliers 2}

# Step 1: Calculate IQR for log-transformed biomass_s
Q1 <- quantile(log(flora_biomass$biomass_s), 0.25, na.rm = TRUE)
Q3 <- quantile(log(flora_biomass$biomass_s), 0.75, na.rm = TRUE)
IQR <- Q3 - Q1

# Step 2: Remove outliers
flora_biomass_clean <- flora_biomass %>%
  filter(log(biomass_s) >= Q1 - 1.5 * IQR & log(biomass_s) <= Q3 + 1.5 * IQR)
```


```{r outliers 3}

# View the cleaned data
par(mfrow = c(2,2))
# Without ouliers 
boxplot(flora_biomass_clean$biomass_s, main = "Without ouliers")
hist(flora_biomass_clean$biomass_s, breaks = 50, main = "Without outliers")

# Without ouliers + logtrasnform
boxplot(log(flora_biomass_clean$biomass_s), main = "No outliers (log(biomass_s))")
hist(log(flora_biomass_clean$biomass_s), breaks = 50, main = "Without outliers (log(biomass_S))")


```

There is almost no difference. Mark proposes to work on biomass as log(biomass) since it is the most common way of working in ecology

### Biomass at community levels

Calculation of total biomasss (biomass_community) by summing all biomass at species level per square meter (biomass_s). 

```{r community biomass}


flora_biomass <- flora_biomass %>% 
  group_by(plot, sampling, treatment) %>% 
  mutate(biomass_community =  sum(biomass_s, na.rm = TRUE)) %>%
  ungroup()

flora_biomass_clean <- flora_biomass_clean %>% 
  group_by(plot, sampling, treatment) %>% 
  mutate(biomass_community =  sum(biomass_s, na.rm = TRUE)) %>%
  ungroup()
  

```



